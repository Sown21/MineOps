name: Cleanup old GHCR images

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1'

jobs:
  ghcr-cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: List and delete old backend images (keep 10)
        env:
          GHCR_IMAGE: mineops/backend
          GH_USER: ${{ github.repository_owner }}
          KEEP: 10
        run: |
          # Récupérer les versions et les trier par date (plus anciennes en premier)
          versions=$(gh api "/users/$GH_USER/packages/container/$GHCR_IMAGE/versions?per_page=100" \
            --jq 'sort_by(.created_at) | reverse')
          
          # Compter le nombre total de versions
          total=$(echo "$versions" | jq 'length')
          echo "Total versions found: $total"
          
          if [ "$total" -gt "$KEEP" ]; then
            # Calculer combien supprimer
            to_delete=$((total - KEEP))
            echo "Deleting $to_delete old versions (keeping $KEEP newest)"
            
            # Récupérer les IDs des versions à supprimer (les plus anciennes)
            ids=$(echo "$versions" | jq -r ".[-$to_delete:][].id")
            
            for id in $ids; do
              echo "Deleting backend version ID: $id"
              gh api --method DELETE "/users/$GH_USER/packages/container/$GHCR_IMAGE/versions/$id" || echo "Failed to delete $id"
            done
          else
            echo "Not enough versions to clean up (found $total, keeping $KEEP)"
          fi

      - name: List and delete old frontend images (keep 10)
        env:
          GHCR_IMAGE: mineops/frontend
          GH_USER: ${{ github.repository_owner }}
          KEEP: 10
        run: |
          # Récupérer les versions et les trier par date (plus anciennes en premier)
          versions=$(gh api "/users/$GH_USER/packages/container/$GHCR_IMAGE/versions?per_page=100" \
            --jq 'sort_by(.created_at) | reverse')
          
          # Compter le nombre total de versions
          total=$(echo "$versions" | jq 'length')
          echo "Total versions found: $total"
          
          if [ "$total" -gt "$KEEP" ]; then
            # Calculer combien supprimer
            to_delete=$((total - KEEP))
            echo "Deleting $to_delete old versions (keeping $KEEP newest)"
            
            # Récupérer les IDs des versions à supprimer (les plus anciennes)
            ids=$(echo "$versions" | jq -r ".[-$to_delete:][].id")
            
            for id in $ids; do
              echo "Deleting frontend version ID: $id"
              gh api --method DELETE "/users/$GH_USER/packages/container/$GHCR_IMAGE/versions/$id" || echo "Failed to delete $id"
            done
          else
            echo "Not enough versions to clean up (found $total, keeping $KEEP)"
          fi